<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>initializeCoreData</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//
//  CDCoreDataController.m
//  CoreDataTraining
//
//  Created by Denis Poifol on 20/04/2016.
//
//

#import "CDCoreDataController.h"

@interface CDCoreDataController()

@property (strong, readwrite) NSManagedObjectContext * managedObjectContext;
@property (strong) NSManagedObjectContext * privateContext;
@property (copy) InitCallbackBlock initCallback;

- (void)initializeCoreData;

@end

@implementation CDCoreDataController

- (id)initWithCallback:(InitCallbackBlock)callback;
{
    self = [super init];
    if (self) {
        self.initCallback = callback;
        [self initializeCoreData];
    }
    return self;
}

- (id)init {
    self = [super init];
    if (self) {
        [self initializeCoreData];
    }
    return self;
}

- (void)initializeCoreData
{
    if (self.managedObjectContext) return;

    NSURL * modelURL = [[NSBundle mainBundle] URLForResource:@"&lt;#Model#&gt;" withExtension:@"momd"];
    NSManagedObjectModel * mom = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
    NSAssert(mom, @"%@:%@ No model to generate a store from", [self class], NSStringFromSelector(_cmd));
    NSPersistentStoreCoordinator * coordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:mom];
    NSAssert(coordinator, @"Failed to initialize coordinator");

    // UI context
    self.managedObjectContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];
    // Top context to perform persistant saves
    self.privateContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSPrivateQueueConcurrencyType];
    self.privateContext.persistentStoreCoordinator = coordinator;
    self.managedObjectContext.parentContext = self.privateContext;

    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{
        NSPersistentStoreCoordinator * psc = self.privateContext.persistentStoreCoordinator;
        NSMutableDictionary * options = [NSMutableDictionary dictionary];
        options[NSMigratePersistentStoresAutomaticallyOption] = @YES;
        options[NSInferMappingModelAutomaticallyOption] = @YES;
        options[NSSQLitePragmasOption] = @{ @"journal_mode":@"DELETE" };

        NSFileManager * fileManager = [NSFileManager defaultManager];
        NSURL * documentsURL = [[fileManager URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
        NSURL * storeURL = [documentsURL URLByAppendingPathComponent:@"DataModel.sqlite"];

        NSError *error = nil;
        if (![psc addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:options error:&amp;error]) {
            DDLogDebug(@"Error initializing PSC: %@\n%@", [error localizedDescription], [error userInfo]);
            abort();
        }
        if (!self.initCallback) return;
        dispatch_sync(dispatch_get_main_queue(), ^{
            [self initCallback]();
        });
    });
}

- (void)save{
    if (![self.privateContext hasChanges] &amp;&amp; ![self.managedObjectContext hasChanges]) return;
    [self.managedObjectContext performBlockAndWait:^{
        NSError * error = nil;
        if (![self.managedObjectContext save:&amp;error]) {
            DDLogDebug(@"Failed to save main context: %@\n%@", [error localizedDescription], [error userInfo]);
            abort();
        }
        [[self privateContext] performBlock:^{
            NSError * privateError = nil;
            if (![self.privateContext save:&amp;privateError]) {
                DDLogDebug(@"Error saving private context: %@\n%@", [privateError localizedDescription], [privateError userInfo]);
                abort();
            }
        }];
    }];
}

@end
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>985CBEC8-4D12-4E40-B4E8-01B31DAB127B</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetTitle</key>
	<string>initializeCoreData</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
